
MatrixChain.exe:     file format elf32-littleriscv


Disassembly of section .text.init:

80000000 <_start>:
80000000:	595552b7          	lui	t0,0x59555
80000004:	55528293          	addi	t0,t0,1365 # 59555555 <_start-0x26aaaaab>
80000008:	7c029073          	csrw	0x7c0,t0
8000000c:	70041117          	auipc	sp,0x70041
80000010:	01410113          	addi	sp,sp,20 # f0041020 <STACK>
80000014:	10c000ef          	jal	ra,80000120 <main>

80000018 <_finish>:
80000018:	50580297          	auipc	t0,0x50580
8000001c:	fe828293          	addi	t0,t0,-24 # d0580000 <tohost>
80000020:	0ff00313          	li	t1,255
80000024:	00628023          	sb	t1,0(t0)
80000028:	4305                	li	t1,1
8000002a:	0062a023          	sw	t1,0(t0)
8000002e:	fe0005e3          	beqz	zero,80000018 <_finish>
80000032:	0001                	nop
80000034:	0001                	nop
80000036:	0001                	nop
80000038:	0001                	nop
8000003a:	0001                	nop
8000003c:	0001                	nop
8000003e:	0001                	nop
80000040:	0001                	nop
80000042:	0001                	nop
80000044:	0001                	nop

Disassembly of section .text:

80000046 <MatrixChainOrder>:
#include <limits.h>
#include <stdio.h>

// Matrix Ai has dimension p[i-1] x p[i] for i = 1..n
int MatrixChainOrder(int p[], int i, int j)
{
80000046:	7179                	addi	sp,sp,-48
80000048:	d606                	sw	ra,44(sp)
8000004a:	d422                	sw	s0,40(sp)
8000004c:	d226                	sw	s1,36(sp)
8000004e:	1800                	addi	s0,sp,48
80000050:	fca42e23          	sw	a0,-36(s0)
80000054:	fcb42c23          	sw	a1,-40(s0)
80000058:	fcc42a23          	sw	a2,-44(s0)
	if (i == j)
8000005c:	fd842703          	lw	a4,-40(s0)
80000060:	fd442783          	lw	a5,-44(s0)
80000064:	00f71463          	bne	a4,a5,8000006c <MatrixChainOrder+0x26>
		return 0;
80000068:	4781                	li	a5,0
8000006a:	a06d                	j	80000114 <MatrixChainOrder+0xce>
	int k;
	int min = INT_MAX;
8000006c:	800007b7          	lui	a5,0x80000
80000070:	fff7c793          	not	a5,a5
80000074:	fef42423          	sw	a5,-24(s0)

	// place parenthesis at different places between first
	// and last matrix, recursively calculate count of
	// multiplications for each parenthesis placement and
	// return the minimum count
	for (k = i; k < j; k++)
80000078:	fd842783          	lw	a5,-40(s0)
8000007c:	fef42623          	sw	a5,-20(s0)
80000080:	a061                	j	80000108 <MatrixChainOrder+0xc2>
	{
		count = MatrixChainOrder(p, i, k)
80000082:	fec42603          	lw	a2,-20(s0)
80000086:	fd842583          	lw	a1,-40(s0)
8000008a:	fdc42503          	lw	a0,-36(s0)
8000008e:	3f65                	jal	80000046 <MatrixChainOrder>
80000090:	84aa                	mv	s1,a0
				+ MatrixChainOrder(p, k + 1, j)
80000092:	fec42783          	lw	a5,-20(s0)
80000096:	0785                	addi	a5,a5,1 # 80000001 <STACK+0x8ffbefe1>
80000098:	fd442603          	lw	a2,-44(s0)
8000009c:	85be                	mv	a1,a5
8000009e:	fdc42503          	lw	a0,-36(s0)
800000a2:	3755                	jal	80000046 <MatrixChainOrder>
800000a4:	87aa                	mv	a5,a0
800000a6:	00f48733          	add	a4,s1,a5
				+ p[i - 1] * p[k] * p[j];
800000aa:	fd842683          	lw	a3,-40(s0)
800000ae:	400007b7          	lui	a5,0x40000
800000b2:	17fd                	addi	a5,a5,-1 # 3fffffff <_start-0x40000001>
800000b4:	97b6                	add	a5,a5,a3
800000b6:	078a                	slli	a5,a5,0x2
800000b8:	fdc42683          	lw	a3,-36(s0)
800000bc:	97b6                	add	a5,a5,a3
800000be:	4394                	lw	a3,0(a5)
800000c0:	fec42783          	lw	a5,-20(s0)
800000c4:	078a                	slli	a5,a5,0x2
800000c6:	fdc42603          	lw	a2,-36(s0)
800000ca:	97b2                	add	a5,a5,a2
800000cc:	439c                	lw	a5,0(a5)
800000ce:	02f686b3          	mul	a3,a3,a5
800000d2:	fd442783          	lw	a5,-44(s0)
800000d6:	078a                	slli	a5,a5,0x2
800000d8:	fdc42603          	lw	a2,-36(s0)
800000dc:	97b2                	add	a5,a5,a2
800000de:	439c                	lw	a5,0(a5)
800000e0:	02f687b3          	mul	a5,a3,a5
		count = MatrixChainOrder(p, i, k)
800000e4:	97ba                	add	a5,a5,a4
800000e6:	fef42223          	sw	a5,-28(s0)

		if (count < min)
800000ea:	fe442703          	lw	a4,-28(s0)
800000ee:	fe842783          	lw	a5,-24(s0)
800000f2:	00f75663          	bge	a4,a5,800000fe <MatrixChainOrder+0xb8>
			min = count;
800000f6:	fe442783          	lw	a5,-28(s0)
800000fa:	fef42423          	sw	a5,-24(s0)
	for (k = i; k < j; k++)
800000fe:	fec42783          	lw	a5,-20(s0)
80000102:	0785                	addi	a5,a5,1
80000104:	fef42623          	sw	a5,-20(s0)
80000108:	fec42703          	lw	a4,-20(s0)
8000010c:	fd442783          	lw	a5,-44(s0)
80000110:	f6f749e3          	blt	a4,a5,80000082 <MatrixChainOrder+0x3c>
	}

	// Return minimum count
}
80000114:	853e                	mv	a0,a5
80000116:	50b2                	lw	ra,44(sp)
80000118:	5422                	lw	s0,40(sp)
8000011a:	5492                	lw	s1,36(sp)
8000011c:	6145                	addi	sp,sp,48
8000011e:	8082                	ret

80000120 <main>:

// Driver code
void main()
{
80000120:	7179                	addi	sp,sp,-48
80000122:	d606                	sw	ra,44(sp)
80000124:	d422                	sw	s0,40(sp)
80000126:	1800                	addi	s0,sp,48
	int arr[] = {40, 20, 30, 10, 30};
80000128:	f00407b7          	lui	a5,0xf0040
8000012c:	00078793          	mv	a5,a5
80000130:	438c                	lw	a1,0(a5)
80000132:	43d0                	lw	a2,4(a5)
80000134:	4794                	lw	a3,8(a5)
80000136:	47d8                	lw	a4,12(a5)
80000138:	4b9c                	lw	a5,16(a5)
8000013a:	fcb42c23          	sw	a1,-40(s0)
8000013e:	fcc42e23          	sw	a2,-36(s0)
80000142:	fed42023          	sw	a3,-32(s0)
80000146:	fee42223          	sw	a4,-28(s0)
8000014a:	fef42423          	sw	a5,-24(s0)
	int n = sizeof(arr) / sizeof(arr[0]);
8000014e:	4795                	li	a5,5
80000150:	fef42623          	sw	a5,-20(s0)

		MatrixChainOrder(arr, 1, n - 1);
80000154:	fec42783          	lw	a5,-20(s0)
80000158:	fff78713          	addi	a4,a5,-1 # f003ffff <STACK+0xffffefdf>
8000015c:	fd840793          	addi	a5,s0,-40
80000160:	863a                	mv	a2,a4
80000162:	4585                	li	a1,1
80000164:	853e                	mv	a0,a5
80000166:	35c5                	jal	80000046 <MatrixChainOrder>
}
80000168:	0001                	nop
8000016a:	50b2                	lw	ra,44(sp)
8000016c:	5422                	lw	s0,40(sp)
8000016e:	6145                	addi	sp,sp,48
80000170:	8082                	ret
